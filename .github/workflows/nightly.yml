name: 🌙 Nightly Build & Test

on:
  schedule:
    # Run every night at 2:00 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      run_performance_tests:
        description: 'Run performance tests'
        required: false
        default: true
        type: boolean
      run_stress_tests:
        description: 'Run stress tests'
        required: false  
        default: false
        type: boolean

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  nightly-tests:
    name: 🌙 Comprehensive Testing
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        configuration: [Debug, Release]
      fail-fast: false
      
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🛠️ Setup .NET ${{ env.DOTNET_VERSION }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 📦 Restore packages
      run: dotnet restore NetSim.sln
      
    - name: 🔨 Build (${{ matrix.configuration }})
      run: dotnet build NetSim.sln --no-restore --configuration ${{ matrix.configuration }}
      
    - name: 🧪 Full Test Suite
      run: |
        dotnet test NetSim.sln \
          --no-build \
          --configuration ${{ matrix.configuration }} \
          --logger trx \
          --logger "console;verbosity=detailed" \
          --collect:"XPlat Code Coverage" \
          --results-directory ./test-results/${{ matrix.os }}-${{ matrix.configuration }}
          
    - name: 📊 Upload Test Results  
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.configuration }}
        path: ./test-results/${{ matrix.os }}-${{ matrix.configuration }}/**
        retention-days: 7

  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.run_performance_tests != 'false'
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🛠️ Setup .NET ${{ env.DOTNET_VERSION }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 📦 Restore packages
      run: dotnet restore NetSim.sln
      
    - name: 🔨 Build (Release)
      run: dotnet build NetSim.sln --no-restore --configuration Release
      
    - name: ⚡ Performance Benchmarks
      run: |
        echo "## ⚡ Performance Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Measure test execution time
        start_time=$(date +%s)
        
        # Run tests with timing
        dotnet test NetSim.sln \
          --no-build \
          --configuration Release \
          --logger "console;verbosity=minimal" \
          --filter "Category!=Slow"
          
        end_time=$(date +%s)
        execution_time=$((end_time - start_time))
        
        echo "🏃‍♂️ **Test Execution Time**: ${execution_time}s" >> $GITHUB_STEP_SUMMARY
        
        # Performance benchmarks
        echo "### 📊 Performance Metrics" >> $GITHUB_STEP_SUMMARY
        echo "- **CLI Handler Tests**: < 15s target" >> $GITHUB_STEP_SUMMARY
        echo "- **Simulation Core Tests**: < 30s target" >> $GITHUB_STEP_SUMMARY
        echo "- **Total Suite**: < 60s target" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ $execution_time -gt 60 ]; then
          echo "⚠️ **Warning**: Tests exceeded 60s performance target" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ **Performance**: Within target" >> $GITHUB_STEP_SUMMARY
        fi

  stress-tests:
    name: 💪 Stress Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.run_stress_tests == 'true'
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🛠️ Setup .NET ${{ env.DOTNET_VERSION }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 📦 Restore packages
      run: dotnet restore NetSim.sln
      
    - name: 🔨 Build (Release)
      run: dotnet build NetSim.sln --no-restore --configuration Release
      
    - name: 💪 Stress Testing
      timeout-minutes: 30
      run: |
        echo "## 💪 Stress Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Run tests multiple times to check for flaky tests
        for i in {1..5}; do
          echo "### Run $i/5"
          dotnet test NetSim.sln \
            --no-build \
            --configuration Release \
            --logger "console;verbosity=minimal" || echo "Run $i failed"
        done
        
        echo "✅ **Stress Test**: Completed 5 iterations" >> $GITHUB_STEP_SUMMARY

  test-matrix:
    name: 🧪 Vendor Test Matrix
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        vendor: [Cisco, Juniper, Arista, Nokia, Huawei, Fortinet, MikroTik, Aruba, Dell]
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🛠️ Setup .NET ${{ env.DOTNET_VERSION }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 📦 Restore packages
      run: dotnet restore NetSim.sln
      
    - name: 🔨 Build
      run: dotnet build NetSim.sln --no-restore --configuration Release
      
    - name: 🏭 Test ${{ matrix.vendor }}
      run: |
        echo "Testing ${{ matrix.vendor }} vendor..."
        dotnet test NetSim.sln \
          --no-build \
          --configuration Release \
          --filter "FullyQualifiedName~${{ matrix.vendor }}" \
          --logger "console;verbosity=detailed"

  report:
    name: 📋 Nightly Report
    runs-on: ubuntu-latest
    needs: [nightly-tests, performance-tests, test-matrix]
    if: always()
    
    steps:
    - name: 📋 Generate Report
      run: |
        echo "# 🌙 NetSim Nightly Build Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Date**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 📊 Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Comprehensive Tests**: ${{ needs.nightly-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Performance Tests**: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY  
        echo "- **Vendor Matrix**: ${{ needs.test-matrix.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 🏭 Vendor Coverage" >> $GITHUB_STEP_SUMMARY
        echo "✅ Cisco, Juniper, Arista, Nokia, Huawei, Fortinet, MikroTik, Aruba, Dell" >> $GITHUB_STEP_SUMMARY
        echo "✅ F5, Extreme, Broadcom, Alcatel, Anira, Linux" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 🌐 Protocol Coverage" >> $GITHUB_STEP_SUMMARY
        echo "✅ Routing: OSPF, BGP, EIGRP, RIP, IGRP, IS-IS" >> $GITHUB_STEP_SUMMARY
        echo "✅ Discovery: CDP, LLDP" >> $GITHUB_STEP_SUMMARY
        echo "✅ Redundancy: STP, HSRP, VRRP" >> $GITHUB_STEP_SUMMARY